"""
Created on Fri Jul 26 07:12:28 2024
@author: obooklage
"""

import os
import uuid
from threading import Thread
import http.server
import glob
import pathlib

from urllib.parse import urlparse
from urllib.parse import parse_qs
import socketserver
from web_interfaces import get_interfaces

server_path = '.'
pParent = None
allmidifiles = []

class MyHttpRequestHandler(http.server.SimpleHTTPRequestHandler):
    uuid = uuid.uuid4()

    def do_GET(self):
        global server_path
        global allmidifiles
        print(f"MyHttpRequestHandler {self.uuid} do_GET")
        self.send_response(200)
        self.send_header("Content-type", "text/html")
        self.end_headers()

        # Extract query param
        name = 'MIDIFILES'
        query_components = parse_qs(urlparse(self.path).query)
        if 'name' in query_components:
            name = query_components["name"][0]
            filepath = os.path.join(server_path,name)
            print(f"WebServer {self.uuid} request [{filepath}]")
            pParent.MidifileChange(filepath)

        # Some custom HTML code, possibly generated by another function
        color = '#339933'
        header_style = f" style='color:{color};background-color:#333333;font-size: 32px;text-transform: uppercase;' "
        text_style = " style='font-size: 18px;' "
        html = "<!DOCTYPE html>" \
        "<html><head>" \
        "<meta charset='utf-8'>" \
        "</head>" \
        "<body>" \
        f"<h1><span{header_style}>SELECT {os.path.basename(name)}</span></h1>"

        for midifile in allmidifiles:
            path = pathlib.PurePath(midifile)
            html += f"<span{text_style}>{path.parent.name} - <a href='?name={midifile}'>{os.path.basename(midifile)}</a></span><br>"

        html += "</body></html>"
        self.wfile.write(bytes(html, "utf8"))
        return

class ClassThreadWebServer(Thread):
    uuid = None
    midipath = None
    my_server = None
    port = 8888
    myhandler = None

    def __init__(self,Parent):
        global server_path
        global pParent
        global allmidifiles
        Thread.__init__( self )
        pParent = Parent
        self.midipath = pParent.settings.GetMidiPath()
        server_path = pParent.settings.GetMidiPath()
        self.uuid = uuid.uuid4()
        self.myhandler = MyHttpRequestHandler

        for file in sorted(glob.glob(os.path.join(server_path,"**", "*.mid"), recursive = True)):
            # print(f"WebServer {self.uuid} MIDI FOUND IN {path.parent.name} =[{file}]")
            allmidifiles.append(file)

    def __del__(self):
        if self.my_server:
            self.my_server.server_close()
            self.my_server.shutdown()
            self.my_server = None
        print(f"WebServer {self.uuid} destroyed")

    def run(self):
        try:
            self.my_server = socketserver.TCPServer(("", self.port), self.myhandler)
            interfaces = get_interfaces(True, False)
            for interface in interfaces :
                print(f"WebServer {self.uuid} serve http://{interface['ip']}:{self.port} [{server_path}]")
            self.my_server.serve_forever()
        except:
            print(f"! WebServer {self.uuid} CAN NOT SERVE ON THIS PORT {self.port}")

    def quit(self):
        if self.my_server:
            self.my_server.server_close()
            self.my_server.shutdown()
            self.my_server = None
